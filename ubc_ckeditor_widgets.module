<?php

use Drupal\Component\Utility\Color;

/**
 * @file
 * Contains ubc_ckeditor_widgets.module.
 */

/**
 * Implements hook_page_attachments_alter().
 */
function ubc_ckeditor_widgets_page_attachments_alter(array &$page) {

  // Attaches css assets globally.
  $page['#attached']['library'][] = 'ubc_ckeditor_widgets/ubc_ckeditor_widgets.ui';

  // Read config and add to drupalSettings
  $config = \Drupal::config('ubc_ckeditor_widgets.settings');
  $fields = [
    'background_colors',
    'gap_styles',
    'padding_styles',
    'margin_styles',
    'table_styles',
    'three_column_layout_styles',
    'two_column_layout_styles',
    'width_styles',
  ];

  $default_values = [
    'background_colors' => [
      ['label' => 'White', 'value' => 'bg-white'],
    ],
    'gap_styles' => [
      ['label' => 'Normal', 'value' => 'gap-6'],
    ],
    'padding_styles' => [
      ['label' => 'Normal', 'value' => 'p-6'],
    ],
    'margin_styles' => [
      ['label' => 'Normal', 'value' => 'my-6'],
    ],
    'table_styles' => [
      ['label' => 'None', 'value' => 'table--nostyle'],
    ],
    'three_column_layout_styles' => [
      ['label' => 'Equal Width', 'value' => 'align-equal'],
    ],
    'two_column_layout_styles' => [
      ['label' => 'Equal Width', 'value' => 'align-equal'],
    ],
    'width_styles' => [
      ['label' => 'Column width: Auto', 'value' => 'w-auto'],
    ],

  ];

  $settings = [];

  foreach ($fields as $field) {
    $key_value_pairs = $config->get($field);
    if ($key_value_pairs) {
      // Parse the newline-separated value|key pairs.
      $pairs = explode("\n", $key_value_pairs);
      foreach ($pairs as $pair) {
        list($value, $key) = explode('|', $pair, 2);
        $settings[convertToCamelCase($field)][] = [
          'label' => trim($key),
          'value' => trim($value),
        ];
      }
    } else {
      $settings[convertToCamelCase($field)] = $default_values[$field];
    }
  }

  if (!empty($settings)) {
    $page['#attached']['drupalSettings']['ubcCkeditorWidgets'] = $settings;
  }

}

/**
 * Implements hook_page_attachments().
 */
function ubc_ckeditor_widgets_page_attachments(array &$attachments) {
  $config = \Drupal::config('ubc_ckeditor_widgets.settings');
  $primary_color = $config->get('primary_color') ?? '#002145';
  $secondary_color = $config->get('secondary_color') ?? '#e0e0e0';
  $tertiary_color = $config->get('tertiary_color') ?? '#def1f8';
  $accent_color = $config->get('accent_color') ?? '#003a79';

  /* map form values to variable names */
  $color_keys = [
    $primary_color => 'color-primary',
    $secondary_color => 'color-secondary',
    $tertiary_color => 'color-tertiary',
    $accent_color => 'color-accent',
  ];
  $css_variables = [];
  /* get values and convert to rgb */
  foreach ($color_keys as $theme_key => $variable_name) {
    $hex = $theme_key;
    if ($hex && $rgb = Color::hexToRgb($hex)) {
      $rgb_string = implode(', ', $rgb);
      $variables[$variable_name] = $rgb_string;
      $css_variables[] = "--$variable_name: rgba($rgb_string, 1) !important;";
    }
  }

  $attachments['#attached']['html_head'][] = [
    [
      '#type' => 'html_tag',
      '#tag' => 'style',
      '#value' => ':root {
        ' . implode(' ', $css_variables) . '
      }',
    ],
    'ubc_ckeditor_widgets_inline_styles',
  ];
}

/**
 * Converts a snake_case string to camelCase.
 *
 * @param string $string
 *   The snake_case string.
 *
 * @return string
 *   The camelCase string.
 */
function convertToCamelCase($string) {
  $result = lcfirst(str_replace(' ', '', ucwords(str_replace('_', ' ', $string))));
  return $result;
}
